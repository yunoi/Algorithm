# 챕터 10 그래프이론

# 다양한 그래프 알고리즘
# 서로 다른 개체가 연결되어 있다' 키워드.
# 그래프 자료구조 중 트리 자료구조는 다양한 알고리즘에서 사용됨.
# 최소 힙: 항상 부모 노드가 자식 노드보다 크기가 작은 자료구조로 트리 자료구조에 속한다.
# 트리 자료구조는 부모에서 자식으로 내려오는 계층적인 모델.
# 트리는 전통적인 수학에서는 무방향 그래프로 간주되나, 컴퓨터공학 분야에서는 보통 방향 그래프로 간주됨.

#                      |         그래프                   |           트리
# ---------------------------------------------------------------------------------
# 방향성               | 방향 그래프 혹은 무방향 그래프   | 방향 그래프
# 순환성               | 순환 및 비순환                   | 비순환
# 루트 노드 존재 여부  | 루트 노드가 없음                 | 루트 노드 존재
# 노드간 관계성        | 부모와 자식 관계 없음            | 부모와 자식 관계
# 모델의 종류          | 네트워크 모델                    | 계층 모델

# 노드 개수가 적은 경우 플로이드 워셜 알고리즘이 유용
# 노드와 간선의 개수가 모두 많으면 우선순위 큐를 이용하는 다익스트라 알고리즘이 유리

# 서로소 집합 
# 수학에서 공통 원소가 없는 두 집합을 의미.
# 서로소 집합 자료구조: 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
# union롸 find 연산으로 조작 가능
# union(합집합) 연산: 2개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산.
# find(찾기) 연산: 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산.
# 서로소 집합 자료구조는 합집합과 찾기 연산으로 구성된다.
# union-find(합치기 찾기) 자료구조라고 불리기도 한다.
# 두 집합이 서로소 관계인지를 확인할 수 있다는 말은 각 집합이 어떤 원소를 공통으로 가지고 있는지를 확인할 수 있다는 말과 같기 때문

# 서로소 집합 자료구조
# 트리 자료구조를 이용하여 집합 표현.
# 서로소 집합 정보 (합집합  연산)가 주어졌을 떄 트리 자료구조를 이용해서 집합을 표햔하는 서로소 집합 계산

# 기본적인 서로소 집합 알고리즘
# 특정 원소가 속한 집합 찾기 
def find_parent(parent, x):
  # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
  if parent[x] != x:
    return find_parent(parent, parent[x])
  return x

# 두 원소가 속한 집합 합치기
def union_parent(parent, a, b):
  a = find_parent(parent, a)
  b = find_parent(parent, b)
  if a < b:
    parent[b] = a
  else:
    parent[a] = b
  
# 노드의 개수와 간서의 개수 입력받기
v, e = map(int, input().split())
parent = [0] * (v+1) # 부모 테이블 초기화

# 부모 테이블상에서 부모를 자기 자신으로 초기화
for i in range(1, v+1):
  parent[i] = i
  
# union 연산 각각 수행
for i in range(e):
  a, b = map(int, input().split())
  union_parent(parent, a, b)

# 각 원소가 속한 집합 출력
print('각 원소가 속한 집합: ', end='')
for i in range(1, v+1):
  print(find_parent(parent, i), end= ' ')
  
print()

# 부모 테이블 출력
print('부모 테이블: ', end='')
for i in range(1, v+1):
  print(parent[i], end=' ')